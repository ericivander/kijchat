
import Encrypt.DES;
import Encrypt.RSA;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Peni Sriwahyu
 */
public class ClientForm extends javax.swing.JFrame {

    private Socket server = null;
    private Socket server_key = null;
    private BufferedOutputStream bos = null;
    private BufferedOutputStream bos_key = null;
    private BufferedInputStream bis = null;
    private ObjectOutputStream oos = null;
    private ObjectInputStream ois = null;
    private OutputStream os = null;
    private DataInputStream dis = null;
    private DataInputStream dis_key = null;
    //private DataOutputStream os = null;
    private BigInteger pubEKey;
    private BigInteger pubNKey;
    private ArrayList<String> rcpt = new ArrayList<>();
    private threadReadClient trdClient;
    private threadDistKeyClient trdClientKey;
    public boolean isConnected = false;
    private String pesan;
    public ArrayList<String> openedChat = new ArrayList();
    RSA myKey = new RSA();
    private byte[] DESKey = new byte[8];
    private Random r = new Random();
    private int bitLength = 64;

    /**
     * Creates new form ClientForm
     */
    public ClientForm() {
        r.nextBytes(DESKey);
        //System.out.println("DES KEY : " + bytesToHex(DESKey));
        initComponents();
        setEnObject(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dispose();
                if (isConnected == true) {
                    disConForm();
                }
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendText = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        room = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msgPool = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        uname = new javax.swing.JTextField();
        servname = new javax.swing.JTextField();
        connBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listUser = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sendText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTextActionPerformed(evt);
            }
        });

        sendBtn.setText("SEND");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("TO : ");

        room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomActionPerformed(evt);
            }
        });

        jLabel2.setText("USER ONLINE:");

        msgPool.setEditable(false);
        msgPool.setColumns(20);
        msgPool.setRows(5);
        jScrollPane2.setViewportView(msgPool);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel3.setText("BUMH BUMH CHAT");

        jLabel4.setText("USERNAME :");

        uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });

        servname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servnameActionPerformed(evt);
            }
        });

        connBtn.setText("CONNECT");
        connBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("SERVER     :");

        listUser.setEditable(false);
        listUser.setColumns(20);
        listUser.setRows(5);
        jScrollPane3.setViewportView(listUser);

        jLabel6.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel6.setText("Simple Chat Desktop Application");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/its.png"))); // NOI18N
        jLabel7.setText("jLabel7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(connBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(servname, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(sendText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(47, 47, 47)
                                .addComponent(room, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(servname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendText, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomActionPerformed

    private void connBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connBtnActionPerformed
        if (connBtn.getText().equals("DISCONNECT")) {
            disConForm();
            clearAll();
            setConBtn(false);
        } else {
            connTo();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_connBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        if (room.getSelectedIndex() != -1) {
            if (!(sendText.getText().equals(""))) {
                try {
                    byte[] theKey = DESKey;
                    byte[] IV = "UDPEERNI".getBytes();

                    String receiver = (String) room.getSelectedItem();
                    receiver = "RCPT " + receiver;
                    send(receiver);
                    this.setPubEKey("0");
                    this.setPubNKey("0");
                    receiver = (String) room.getSelectedItem();
                    receiver = "GET " + receiver;
                    send_to_key(receiver);
                    while (this.pubEKey.equals(0)){
                    }
                    while(this.pubNKey.equals(0)){
                    }
                    String message = (String) sendText.getText();
                    byte[] plain = Encrypt.DES.paddingMsg(message.getBytes());
                    byte[][] subKeys = Encrypt.DES.getSubkeys(theKey);
                    //System.out.println("----------------"+plain.length);
                    byte[] chiper = Encrypt.DES.encryptBlock(plain, IV, subKeys);

                    //System.out.println(Encrypt.DES.bytesToHex(chiper));
                    //String baru = new String (chiper);
                    //System.out.println("---------"+baru);
                    //message = new String(chiper);
                    message = Base64.encode(chiper);
                    byte[] EncryptedDESKey;
                    EncryptedDESKey = myKey.encrypt(DESKey, this.pubEKey, this.pubNKey);
                    System.out.println(DES.bytesToHex(DESKey));
                    System.out.println(DES.bytesToHex(EncryptedDESKey));
                    message = "MSG " + message + " " + Base64.encode(EncryptedDESKey);
                    send(message);
                    r.nextBytes(DESKey);
                    //System.out.println(message);
                    msgPool.append("To " + room.getSelectedItem().toString() + " : " + sendText.getText() + "\n");
                    sendText.setText("");
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tidak Ada Penerima Pesan");
        }
        //System.out.println(receiver);
    }//GEN-LAST:event_sendBtnActionPerformed

    private void unameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unameActionPerformed
        connBtnActionPerformed(evt);
    }//GEN-LAST:event_unameActionPerformed

    private void sendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTextActionPerformed
        sendBtnActionPerformed(evt);
    }//GEN-LAST:event_sendTextActionPerformed

    private void servnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servnameActionPerformed
        connBtnActionPerformed(evt);
    }//GEN-LAST:event_servnameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientForm().setVisible(true);
            }
        });
    }

    public void connTo() {
        try {
            if (uname.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Username Kosong");
            } else {
                if (isConnected == false) {
                    server = new Socket(servname.getText() == "" ? "localhost" : servname.getText(), 6060);
                    server_key = new Socket(servname.getText() == "" ? "localhost" : servname.getText(), 6161);
                    bos = new BufferedOutputStream(server.getOutputStream());
                    bos_key = new BufferedOutputStream(server_key.getOutputStream());
                    dis = new DataInputStream(server.getInputStream());
                    dis_key = new DataInputStream(server_key.getInputStream());
                    if (server != null && server_key != null) {
                        isConnected = true;
                    } else if (server == null) {
                        dis.close();
                        bos.close();
                        server.close();
                    } else if (server_key == null) {
                        dis_key.close();
                        bos_key.close();
                        server_key.close();
                    }
                    this.trdClient = new threadReadClient(this, server, dis, this.msgPool, this.listUser, this.room, this.uname);
                    this.trdClient.start();
                    this.trdClientKey = new threadDistKeyClient(this, server, dis_key);
                    this.trdClientKey.start();
                }

                String user = "NAME " + uname.getText();
                send(user);
                send_to_key(user);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Server Sedang Offline");
        }
    }

    public void disConForm() {
        try {
            send("QUIT");
            send_to_key("QUIT");
            isConnected = false;
            dis.close();
            bos.close();
            server.close();
            dis_key.close();
            bos_key.close();
            server_key.close();
            setEnObject(false);
            setEdit(true);
            setConBtn(true);
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setConBtn(boolean value) {
        if (!value) {
            connBtn.setText("CONNECT");
        } else {
            connBtn.setText("DISCONNECT");
        }
    }

    public void setEdit(boolean value) {
        uname.setEditable(value);
        servname.setEditable(value);
    }

    public void clearAll() {
        msgPool.setText("");
        listUser.setText("");
        room.removeAllItems();
        uname.setText("");
        servname.setText("");
    }

    public void setEnObject(boolean parameter) {
        room.setEnabled(parameter);
        listUser.setEnabled(parameter);
        sendBtn.setEnabled(parameter);
        sendText.setEnabled(parameter);
        msgPool.setEnabled(parameter);
    }

    public void send(String request) {
        try {
            bos.write((request + '\r' + '\n').getBytes());
            bos.flush();
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void send_to_key(String request) {
        try {
            bos_key.write((request + '\r' + '\n').getBytes());
            bos_key.flush();
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea listUser;
    private javax.swing.JTextArea msgPool;
    private javax.swing.JComboBox room;
    private javax.swing.JButton sendBtn;
    private javax.swing.JTextField sendText;
    private javax.swing.JTextField servname;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables
    void setPubEKey(String part) {
        this.pubEKey = new BigInteger(part);
    }
    
    void setPubNKey(String part) {
        this.pubNKey = new BigInteger(part);
    }
}
